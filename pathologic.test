<?php
// $Id$

/**
 * @file
 * Pathologic behavior testing.
 */

/**
 * Tests that Pathologic ain't broke.
 */
class PathologicTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Pathologic path filtering',
      'description' => 'Test Pathologic&rsquo;s path translation and conversion.',
      'group' => 'Filter',
    );
  }

  function setUp() {
    parent::setUp('pathologic');

    $this->admin_user = $this->drupalCreateUser(array('administer filters'));
    $this->drupalLogin($this->admin_user);

    // Create some filters
    $non_abs = array(
      'name' => 'Non Absolute',
      'filters[pathologic][status]' => TRUE,
      'filters[pathologic][settings][local_paths]' => 'http://example.com/',
      'filters[pathologic][settings][absolute]' => FALSE,
    );

    $abs = $non_abs;
    $abs['filters[pathologic][settings][local_paths]'] = '';
    $abs['filters[pathologic][settings][absolute]'] => FALSE,


    $this->drupalPost('admin/config/content/formats/add', $both, t('Save configuration'));
    $this->drupalPost('admin/config/content/formats/add', $src_only, t('Save configuration'));
    $this->drupalPost('admin/config/content/formats/add', $href_only, t('Save configuration'));
    $this->drupalPost('admin/config/content/formats/add', $neither, t('Save configuration'));
  }

  function testPaths() {
    // This seems to be necessary to get it to nitice the new formats
    drupal_static_reset('filter_formats');
    // Build some paths to check against
    $paths = array(
      'admin' => url('admin', array('absolute' => TRUE)),
      'foo' => url('foo', array('absolute' => TRUE)),
      'foo/bar' => url('foo/bar', array('absolute' => TRUE)),
      'foo/bar?baz=qux' => url('foo/bar', array('query' => array('baz' => 'qux'), 'absolute' => TRUE)),
      'foo/bar#baz' => url('foo/bar', array('fragment' => 'baz', 'absolute' => TRUE)),
      'foo/bar?baz=qux#quux' => url('foo/bar', array('query' => array('baz' => 'qux'), 'fragment' => 'quux', 'absolute' => TRUE))
    );
    // Both
    $this->assertEqual(check_markup('<a href="foo"><img src="foo/bar"></a>', 4), '<a href="' . $paths['foo'] . '"><img src="' . $paths['foo/bar'] . '"></a>', t('Both'));
    // HREF
    $this->assertEqual(check_markup('<a href="foo"><img src="foo/bar"></a>', 6), '<a href="' . $paths['foo'] . '"><img src="foo/bar"></a>', t('HREF only filtering'));
    // SRC
    $this->assertEqual(check_markup('<a href="foo"><img src="foo/bar"></a>', 5), '<a href="foo"><img src="' . $paths['foo/bar'] . '"></a>', t('SRC only'));
    // Neither
    $this->assertEqual(check_markup('<a href="foo"><img src="foo/bar"></a>', 7), '<a href="foo"><img src="foo/bar"></a>', t('Neither'));
    // With query string
    $this->assertEqual(check_markup('<a href="foo/bar?baz=qux">', 4), '<a href="' . $paths['foo/bar?baz=qux'] . '">', t('With query string') . $paths['foo/bar?baz=qux']);
    // With fragment
    $this->assertEqual(check_markup('<a href="foo/bar#baz">', 4), '<a href="' . $paths['foo/bar#baz'] . '">', t('With fragment'));
    // With query stirng and fragment
    $this->assertEqual(check_markup('<a href="foo/bar?baz=qux#quux">', 4), '<a href="' . $paths['foo/bar?baz=qux#quux'] . '">', t('With query string and fragment'));
    // Dirty URLs
    $this->assertEqual(check_markup('<a href="?q=foo"><img src="index.php?q=foo/bar"></a>', 4), '<a href="' . $paths['foo'] . '"><img src="' . $paths['foo/bar'] . '"></a>', t('Dirty URLs'));
    // Path Filter compatibility
    $this->assertEqual(check_markup('<a href="internal:foo"><img src="internal:foo/bar?baz=qux"></a>', 4), '<a href="' . $paths['foo'] . '"><img src="' . $paths['foo/bar?baz=qux'] . '"></a>', t('Path Filter back compatibility'));
    // Also considered local
    $this->assertEqual(check_markup('<a href="http://example.com/foo"><img src="http://example.com/index.php?q=foo/bar&baz=qux"></a>', 4), '<a href="' . $paths['foo'] . '"><img src="' . $paths['foo/bar?baz=qux'] . '"></a>', t('Also considered local'));
  }
}
